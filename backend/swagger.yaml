openapi: 3.0.0
info:
  title: TaskFlow API
  description: >
    API documentation for TaskFlow backend.  
    Provides authentication, user management, and task management endpoints.  
    Uses JWT-based authentication with role-based access control (user/admin).
  version: 1.0.0

servers:
  - url: /api
    description: Local development server

tags:
  - name: Auth
    description: Authentication APIs (Register, Login)
  - name: Users
    description: User profile & admin user management
  - name: Tasks
    description: Task management (User & Admin routes)

paths:
  /auth/register:
    post:
      tags: [Auth]
      summary: Register a new user
      description: Public endpoint for registering new users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password]
              properties:
                name: { type: string }
                email: { type: string, format: email }
                password: { type: string, format: password }
      responses:
        '201': { description: User registered successfully }
        '400': { description: Invalid input or user already exists }

  /auth/login:
    post:
      tags: [Auth]
      summary: Login user
      description: Authenticate user and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string, format: password }
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
        '401': { description: Invalid credentials }

  /users/profile:
    put:
      tags: [Users]
      summary: Update user profile
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200': { description: Profile updated successfully }

  /users/verify-password:
    post:
      tags: [Users]
      summary: Verify current user password
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [password]
              properties:
                password: { type: string, format: password }
      responses:
        '200': { description: Password verified }

  /users:
    get:
      tags: [Users]
      summary: Get all users (Admin only)
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/User' }
    post:
      tags: [Users]
      summary: Create a new user (Admin only)
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UserInput' }
      responses:
        '201': { description: User created successfully }

  /users/{id}:
    get:
      tags: [Users]
      summary: Get user by ID (Admin only)
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          schema: { type: string }
          required: true
      responses:
        '200': 
          description: User object
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
    put:
      tags: [Users]
      summary: Update user by ID (Admin only)
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          schema: { type: string }
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UserUpdate' }
      responses:
        '200': { description: User updated successfully }
    delete:
      tags: [Users]
      summary: Delete user by ID (Admin only)
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          schema: { type: string }
          required: true
      responses:
        '200': { description: User deleted successfully }

  /tasks:
    get:
      tags: [Tasks]
      summary: Get tasks for logged-in user
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Task' }
    post:
      tags: [Tasks]
      summary: Create task (Admin only)
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TaskInput' }
      responses:
        '201': { description: Task created successfully }

  /tasks/{id}:
    get:
      tags: [Tasks]
      summary: Get task by ID
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          schema: { type: string }
          required: true
      responses:
        '200': 
          description: Task details
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Task' }
    put:
      tags: [Tasks]
      summary: Update task by ID (Admin only)
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          schema: { type: string }
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TaskInput' }
      responses:
        '200': { description: Task updated successfully }
    delete:
      tags: [Tasks]
      summary: Delete task by ID (Admin only)
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          schema: { type: string }
          required: true
      responses:
        '200': { description: Task deleted successfully }

  /tasks/{id}/request-change:
    patch:
      tags: [Tasks]
      summary: Request task status change (User)
      description: Allows user to request a status change for their task
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          schema: { type: string }
          required: true
      responses:
        '200': { description: Request submitted successfully }

  /tasks/admin/all:
    get:
      tags: [Tasks]
      summary: Get all tasks (Admin only)
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          description: List of all tasks
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Task' }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        email: { type: string }
        isAdmin: { type: boolean }
        createdAt: { type: string, format: date-time }
    UserInput:
      type: object
      properties:
        name: { type: string }
        email: { type: string }
        password: { type: string, format: password }
    UserUpdate:
      type: object
      properties:
        name: { type: string }
        email: { type: string }
        password: { type: string, format: password }

    Task:
      type: object
      properties:
        id: { type: string }
        title: { type: string }
        description: { type: string }
        status: { type: string, enum: [pending, in-progress, completed] }
        assignedTo: { type: string }
        dueDate: { type: string, format: date-time }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    TaskInput:
      type: object
      properties:
        title: { type: string }
        description: { type: string }
        status: { type: string, enum: [pending, in-progress, completed] }
        dueDate: { type: string, format: date-time }
      required: [title, status]
